<fragment uiName="standardShaderCombiner" name="standardShaderCombiner" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0">
    <description><![CDATA[Combines inputs from standard shader fragments.]]></description>
    <properties>
        <struct name="lightingData" struct_name="standardShaderLightingData" />        
        <float3 name="color" />
        <float3 name="specularColor" />
        <float3 name="diffuseInput" />
        <float3 name="specularInput" />
        <float name="directDiffuse" />
        <float name="directSpecular" />
        <float3 name="emissionInput" />
        <bool name="specularFresnel" />
        <bool name="FresnelAffectDiff" />
        <bool name="FresnelUseIOR" />
        <float name="Ksn" />
        <float name="Ks" />
        <float name="Kd" />
        <float name="IOR" />
        <float3 name="IrradianceEnv" />
        <float3 name="SpecularEnv" />
        <undefined name="GPUStage" semantic="GPUStage" />
    </properties>
    <values>
        <float3 name="color" value="1.0 1.0 1.0" />
        <float3 name="specularColor" value="0.0 0.0 0.0" />
        <float3 name="diffuseInput" value="1.0 1.0 1.0" />
        <float3 name="specularInput" value="0.0 0.0 0.0" />
        <float3 name="emissionInput" value="0.0 0.0 0.0" />
        <float3 name="IrradianceEnv" value="0.0 0.0 0.0" />
        <float3 name="SpecularEnv" value="0.0 0.0 0.0" />
    </values>
    <outputs>
        <struct name="standardShaderCombiner" struct_name="mayaSurfaceShaderOutput" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.1">
            <function_name val="standardShaderCombiner" />
            <source>
                <![CDATA[
mayaSurfaceShaderOutput standardShaderCombiner(
                standardShaderLightingData lightingData,
                float3 color,
                float3 specularColor,
                float3 diffuseInput,
                float3 specularInput,
                float directDiffuse,
                float directSpecular,
                float3 emissionInput,
                bool specularFresnel,
                bool FresnelAffectDiffuse,
                bool FresnelUseIOR,
                float Ksn,
                float Ks,
                float Kd,
                float IOR,
                float3 IrradianceEnv,
                float3 SpecularEnv)
{
    mayaSurfaceShaderOutput result;
    float3 diffuse = color * ((diffuseInput * directDiffuse) + IrradianceEnv) * Kd;
    float3 specular = specularColor * (specularInput + SpecularEnv) * directSpecular * Ks;
    if (specularFresnel)
    {
        float fresnel = 1.0f;
        float fresnelWeight = Ksn;
        float NV = dot(lightingData.N, -lightingData.V);
        if (NV < 0.0f)
        {
            if (FresnelUseIOR)
            {
                fresnelWeight = (IOR - 1) / (IOR + 1);
                fresnelWeight *= fresnelWeight;
            }
            float temp = 1.0f + NV;
            float fweight = temp * temp;
            fweight *= fweight;
            fweight *= temp;
            fresnel = fresnelWeight + fweight * (1.0f - fresnelWeight);
        }
        specular *= fresnel;
        if (FresnelAffectDiffuse)
            diffuse *= 1.0f - fresnel * Ks;
    }

    result.outColor = diffuse + specular + emissionInput;
    result.outTransparency = float3(0.0f, 0.0f, 0.0f);
    result.outGlowColor = float3(0.0f, 0.0f, 0.0f);
    result.outMatteOpacity = float3(-1.0e+06f, -1.0e+06f, -1.0e+06f);
    result.outSurfaceFinal = float4(result.outColor, 1.0f);
    return result;
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="standardShaderCombiner" />
            <source>
                <![CDATA[
mayaSurfaceShaderOutput standardShaderCombiner(
                standardShaderLightingData lightingData,
                float3 color,
                float3 specularColor,
                float3 diffuseInput,
                float3 specularInput,
                float directDiffuse,
                float directSpecular,
                float3 emissionInput,
                bool specularFresnel,
                bool FresnelAffectDiffuse,
                bool FresnelUseIOR,
                float Ksn,
                float Ks,
                float Kd,
                float IOR,
                float3 IrradianceEnv,
                float3 SpecularEnv)
{
    mayaSurfaceShaderOutput result;
    float3 diffuse = color * ((diffuseInput * directDiffuse) + IrradianceEnv) * Kd;
    float3 specular = specularColor * (specularInput + SpecularEnv) * directSpecular * Ks;
    if (specularFresnel)
    {
        float fresnel = 1.0f;
        float fresnelWeight = Ksn;
        float NV = dot(lightingData.N, -lightingData.V);
        if (NV < 0.0f)
        {
            if (FresnelUseIOR)
            {
                fresnelWeight = (IOR - 1) / (IOR + 1);
                fresnelWeight *= fresnelWeight;
            }
            float temp = 1.0f + NV;
            float fweight = temp * temp;
            fweight *= fweight;
            fweight *= temp;
            fresnel = fresnelWeight + fweight * (1.0f - fresnelWeight);
        }
        specular *= fresnel;
        if (FresnelAffectDiffuse)
            diffuse *= 1.0f - fresnel * Ks;
    }

    result.outColor = diffuse + specular + emissionInput;
    result.outTransparency = float3(0.0f, 0.0f, 0.0f);
    result.outGlowColor = float3(0.0f, 0.0f, 0.0f);
    result.outMatteOpacity = float3(-1.0e+06f, -1.0e+06f, -1.0e+06f);
    result.outSurfaceFinal = float4(result.outColor, 1.0f);
    return result;
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="standardShaderCombiner" />
            <source>
                <![CDATA[
mayaSurfaceShaderOutput standardShaderCombiner(
                standardShaderLightingData lightingData,
                vec3 color,
                vec3 specularColor,
                vec3 diffuseInput,
                vec3 specularInput,
                float directDiffuse,
                float directSpecular,
                vec3 emissionInput,
                bool specularFresnel,
                bool FresnelAffectDiffuse,
                bool FresnelUseIOR,
                float Ksn,
                float Ks,
                float Kd,
                float IOR,
                vec3 IrradianceEnv,
                vec3 SpecularEnv)
{
    mayaSurfaceShaderOutput result;
    vec3 diffuse = color * ((diffuseInput * directDiffuse) + IrradianceEnv) * Kd;
    vec3 specular = specularColor * (specularInput + SpecularEnv) * directSpecular * Ks;
    if (specularFresnel)
    {
        float fresnel = 1.0f;
        float fresnelWeight = Ksn;
        float NV = dot(lightingData.N, -lightingData.V);
        if (NV < 0.0f)
        {
            if (FresnelUseIOR)
            {
                fresnelWeight = (IOR - 1) / (IOR + 1);
                fresnelWeight *= fresnelWeight;
            }
            float temp = 1.0f + NV;
            float fweight = temp * temp;
            fweight *= fweight;
            fweight *= temp;
            fresnel = fresnelWeight + fweight * (1.0f - fresnelWeight);
        }
        specular *= fresnel;
        if (FresnelAffectDiffuse)
            diffuse *= 1.0f - fresnel * Ks;
    }

    result.outColor = diffuse + specular + emissionInput;
    result.outTransparency = vec3(0.0f, 0.0f, 0.0f);
    result.outGlowColor = vec3(0.0f, 0.0f, 0.0f);
    result.outMatteOpacity = vec3(-1.0e+06f, -1.0e+06f, -1.0e+06f);
    result.outSurfaceFinal = vec4(result.outColor, 1.0f);
    return result;
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>
