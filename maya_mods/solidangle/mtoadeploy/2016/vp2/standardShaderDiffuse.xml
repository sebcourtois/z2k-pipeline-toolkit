<fragment uiName="standardShaderDiffuse" name="standardShaderDiffuse" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0">
    <description><![CDATA[Fragment for the arnold standard shader.]]></description>
    <properties>
        <struct name="lightingData" struct_name="standardShaderLightingData" />
    </properties>
    <values>
    </values>
    <outputs>
        <float3 name="outColor" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.1">
            <function_name val="standardShaderDiffuse" />
            <source>
                <![CDATA[
float3 standardShaderDiffuse(
        standardShaderLightingData lightingData)
{
    float NDL = saturate(dot(lightingData.N, lightingData.L));
    if (NDL > 0.0f)
        return lightingData.diffuse * NDL;
    else
        return float3(0.0f, 0.0f, 0.0f);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="standardShaderDiffuse" />
            <source>
                <![CDATA[
float3 standardShaderDiffuse(
        standardShaderLightingData lightingData)
{
    float NDL = saturate(dot(lightingData.N, lightingData.L));
    if (NDL > 0.0f)
        return lightingData.diffuse * NDL;
    else
        return float3(0.0f, 0.0f, 0.0f);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="standardShaderDiffuse" />
            <source>
                <![CDATA[
vec3 standardShaderDiffuse(
        standardShaderLightingData lightingData)
{
    float NDL = saturate(dot(lightingData.N, lightingData.L));
    if (NDL > 0.0f)
        return lightingData.diffuse * NDL;
    else
        return vec3(0.0f, 0.0f, 0.0f);
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>