import sysimport osimport ConfigParserimport hashlibimport timefrom shotgun_api3 import ShotgunOPERATOR_ENTITY = "CustomNonProjectEntity01"# Authentification token lifespan in hoursLIFETIME = 12class ShotgunEngine():    def __init__(self, configfile=""):        self.sg = None        self.SERVER_PATH = ''        self.SCRIPT_NAME = ''        self.SCRIPT_KEY = ''        self.PROJECTPATH_FN = ''        self.TASKPATH_FN = ''        self.TASKREF_FN = ''        self.configsplitcharacter = ';'        self.cmdtable = {}        if configfile == "":            configfile = os.path.dirname(os.path.realpath(__file__)) + "/TK_ShotgunConfig.config"        Shotgun.NO_SSL_VALIDATION = True        self.readconfigfile(configfile)        self.sg = Shotgun(self.SERVER_PATH, self.SCRIPT_NAME, self.SCRIPT_KEY)        self.fillcmdtable()        self.currentuser = None    def readconfigfile(self, configfile):        try:            f = open(configfile, 'r')            lines = f.readlines()            self.SERVER_PATH = lines[0].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.SCRIPT_NAME = lines[1].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.SCRIPT_KEY = lines[2].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.PROJECTPATH_FN = lines[3].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.TASKPATH_FN = lines[4].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.TASKREF_FN = lines[5].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")        finally:            f.close()    def fillcmdtable(self):        self.cmdtable["printconfig"] = [self.printconfig, 0, 0, "Print configuration"]        self.cmdtable["loginUser"] = [self.loginUser, 2, 3, "No description"]        self.cmdtable["listTasks"] = [self.listTasks, 2, 3, "No description"]    # ---------------------------------------------------------------------------    # Commands    # ---------------------------------------------------------------------------    def loginUser(self, login=None, password=None, silent=False, hashedPassword=None, inCreateCookie=True):        if password == None:             password = hashedPassword        self.currentuser = self.sg.authenticate_human_user(login, password)        if(self.currentuser != None):            if(not silent):                print "User " + login + " authenticated successfully !"        else:            if hashedPassword == None:                hashedPassword = hashlib.md5(password).hexdigest()            # Ok, let's try with an Operator            filters = [                ['sg_login', 'is', login],                [ "sg_password", "is", hashedPassword]           ]            fields = ['code', 'login', 'id', 'sg_user']            self.currentuser = self.sg.find_one(OPERATOR_ENTITY, filters, fields)            if self.currentuser != None:                self.currentuser['name'] = self.currentuser.pop('code')                self.currentuser['type'] = 'Operator'                if(not silent):                    print "Operator " + login + " authenticated successfully !"            else:                print "Cannot authenticate user " + login        # If we logged in successfully, create the cookie        if self.currentuser != None and inCreateCookie:            self.createCookie(login, hashedPassword)        return self.currentuser    def getShotAssets():        pass    def listTasks(self, login, password, sg=None):        if(sg == None):            self.sg = Shotgun(SERVER_PATH, SCRIPT_NAME, SCRIPT_KEY)        else:            self.sg = sg        result = loginUser(login, password, self.sg)        if(result == None):            print "Incorrect login credentials !"            return        filters = [                ['task_assignees', 'is', result],                {                    "filter_operator": "any",                    "filters": [                        [ "sg_status_list", "is", "rdy"],                        [ "sg_status_list", "is", "ip" ]                    ]                }           ]        fields = ['content', 'step', 'entity', 'project', 'sg_status_list']        tasks = sg.find("Task", filters, fields)        print "Il y a " + str(len(tasks)) + " taches assignees a " + result["login"]        for task in tasks:            entityName = "NoEntity"            entityType = "NoType"            stepName = "NoStep"            if(task['entity'] != None):                entityName = task['entity']['name']                entityType = task['entity']['type']            if(task['step'] != None):                stepName = task['step']['name']            print (task['project']['name'] + " | ").ljust(25) + (entityType + " : ").ljust(10) + (stepName + " ").ljust(10) + (entityName + " - ").ljust(20) + task['content']    # ---------------------------------------------------------------------------    # Login    # ---------------------------------------------------------------------------    def getCookiePath(self, inCreateContainer=True):        folderPath = os.path.join(os.path.expanduser("~"), "shotgunEngine")        if inCreateContainer and not os.path.exists(folderPath):            os.makedirs(folderPath)        return os.path.join(folderPath, "auth.ini")    def createCookie(self, login, password):        cookiePath = self.getCookiePath()        config = ConfigParser.RawConfigParser()        config.add_section('auth')        config.set('auth', 'login', login)        config.set('auth', 'password', password)        config.set('auth', 'birth', int(time.time()))        with open(cookiePath, 'w') as f:            config.write(f)    def removeCookie(self):        cookiePath = self.getCookiePath()        if os.path.isfile(cookiePath):            os.remove(cookiePath)    def getLoggedUser(self):        cookiePath = self.getCookiePath()        config = ConfigParser.RawConfigParser()        config.read(cookiePath)        if not config.has_section("auth"):            return None        # If cookie is found, verify it's still up to date        birthSeconds = int(config.get("auth", "birth"))        if time.time() - birthSeconds >= LIFETIME * 3600:            self.removeCookie()            return None        return self.loginUser(config.get("auth", "login"), hashedPassword=config.get("auth", "password"), inCreateCookie=False)    def logoutUser(self):        self.removeCookie()        self.currentuser = None        self.sg.close()    # ---------------------------------------------------------------------------    # cmdLine part    # ---------------------------------------------------------------------------    def printconfig(self):        print '';        print ' *** TK ShotgunEngine Config ***';        print '-----------------------------------------';        print 'SERVER_PATH "' + self.SERVER_PATH + '"'        print 'SCRIPT_NAME "' + self.SCRIPT_NAME + '"'        print 'SCRIPT_KEY "' + self.SCRIPT_KEY + '"'        print 'PROJECTPATH_FN "' + self.PROJECTPATH_FN + '"'        print 'TASKPATH_FN "' + self.TASKPATH_FN + '"'        print 'TASKREF_FN "' + self.TASKREF_FN + '"'        print '-----------------------------------------';        print '';    def printhelp(self):        print '';        print ' *** TK ShotgunEngine Help ***';        print '-----------------------------------------';        for key in self.cmdtable:            print key + " : from " + str(self.cmdtable[key][1]) + " to " + str(self.cmdtable[key][2]) + " args (" + str(self.cmdtable[key][3]) + ")"        print '-----------------------------------------';        print '';    def parsecmdline(self, arguments):        if len(arguments) == 0:            print "No argments given, please give at least a command name!"            self.printhelp()        else:            cmdName = arguments[0]            arguments = arguments[1:]            if cmdName in self.cmdtable:                minArgs = self.cmdtable[cmdName][1]                maxArgs = self.cmdtable[cmdName][2]                desc = self.cmdtable[cmdName][3]                if len(arguments) >= minArgs and len(arguments) <= maxArgs :                    self.runCommand(self.cmdtable[cmdName][0], arguments)                else:                    argsHint = cmdName + " : wrong number of arguments, "                    if minArgs == maxArgs :                        argsHint += str(minArgs)                    else:                        argsHint += str(minArgs) + " to " + str(maxArgs)                    argsHint += " expected (" + str(len(arguments) - 1) + " given)"                    print argsHint                    self.printhelp()            else:                print "Command \"" + cmdName + "\" dont 'exists !"                self.printhelp()    def runCommand(self, cb, tokens):        if(len(tokens) == 0):            cb()        elif(len(tokens) == 1):            cb(tokens[0])        elif(len(tokens) == 2):            cb(tokens[0], tokens[1])        elif(len(tokens) == 3):            cb(tokens[0], tokens[1], tokens[2])