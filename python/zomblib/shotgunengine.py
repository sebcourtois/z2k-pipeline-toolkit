# import sysimport osimport ConfigParserimport hashlibimport timeimport randomimport sysfrom shotgun_api3 import ShotgunPROJECT_IDS = {            "zombillenium":67,            "zombtest":66}DEFAULT_PROJECT = 'zombillenium' OPERATOR_ENTITY = "CustomNonProjectEntity01"COMPANY_ENTITY = "CustomNonProjectEntity08"OPERATOR_FIELD = 'sg_operator'OPERATORS_FIELD = 'sg_operators'PASSWORD_LENGTH = 6LOGIN_LENGTH = 4USER_INFO = ['code', 'sg_login', 'id', 'sg_user', 'sg_company', 'sg_allowedsteps', 'sg_currentstep', 'sg_password']SHOT_INFO = ["code", "sg_cut_in", "sg_cut_out", "sg_cut_duration", "sg_sequence"]SEQUENCE_INFO = ['code']ASSET_INFO = ["code", "sg_asset_type"]STEP_INFO = ["code", "entity_type", "id"]TASK_INFO = ['content', 'step', 'entity', 'project', 'sg_status_list', OPERATORS_FIELD]VERSION_INFO = ['code', 'entity', 'sg_task']TYPE_INFO = {                'User':USER_INFO,                'Shot':SHOT_INFO,                'Sequence':SEQUENCE_INFO,                'Asset':ASSET_INFO,                'Task':TASK_INFO,                'Version':VERSION_INFO            }ASSET_SUBTYPE_FIELD = "sg_sous_type"if ASSET_SUBTYPE_FIELD != "":    ASSET_INFO.append(ASSET_SUBTYPE_FIELD)# Authentification token lifespan in hoursLIFETIME = 12class ShotgunEngine():    """    Example usages:    -------------------------------------------------------------------    #Import/Instanciation    from zomblib import shotgunengine    reload(shotgunengine)    core=shotgunengine.ShotgunEngine()    #Create an operator, result will contain created user and password    result = core.createOperator("TestOp")    if result != None:        createdUser, password = result        #Change password        if(core.changePassword("TestOp", password, "MyNicePassword")):            print "Success"        else:            print "Failure"         #Remove operator        print "Removed User ? " + str(core.removeOperator("TestOp"))    #Create a version    core.createVersion(s_inName, s_inEntityName, s_inTaskName, s_inMediaPath=None, s_inComment="")    #We have to log a user, rely on the fact we have a logged user already    if core.getLoggedUser() != None:        core.createVersion("sq6660_sh0010a_previz-v002", "sq6660_sh0010a", "previz 3D", "\\\\Diskstation\\Z2K\\01_PRODUCTION\\ANIMATIQUE\\ZB_V_12 Aout\\ZB_EDL_20150812_Decoupage\\sq6660_sh0010a_animatic.mov")    else:        print "Please log in before creating a version !!"    """    def __init__(self, projectName=DEFAULT_PROJECT, configfile=""):        self.sg = None        self.SERVER_PATH = ''        self.SCRIPT_NAME = ''        self.SCRIPT_KEY = ''        self.PROJECTPATH_FN = ''        self.TASKPATH_FN = ''        self.TASKREF_FN = ''        self.configsplitcharacter = ';'        self.cmdtable = {}        self.projectName = projectName        self._getProjectId()        if configfile == "":            configfile = os.path.dirname(os.path.realpath(__file__)) + "/TK_ShotgunConfig.config"        Shotgun.NO_SSL_VALIDATION = True        self._readconfigfile(configfile)        self.sg = Shotgun(self.SERVER_PATH, self.SCRIPT_NAME, self.SCRIPT_KEY)        self._fillcmdtable()        self.currentUser = None    def _getEntity(self, s_or_d_inCodeOrInfo, s_inType='', l_outFields=None, l_customFilters=None):        #Find the entity        if isinstance(s_or_d_inCodeOrInfo, dict) and 'id' in s_or_d_inCodeOrInfo:            return s_or_d_inCodeOrInfo        if not s_inType in TYPE_INFO:            raise KeyError('{0} is not recognized as a Shotgun entity type !')        #given item is not a dict, find by name...        keyName = 'code'        if s_inType == 'Task':            keyName = 'content'        filters =   [                        ['project', 'is', {'type':'Project', 'id':self._getProjectId()}],                        [keyName, 'is', s_or_d_inCodeOrInfo]                    ]        if l_customFilters != None:            filters.extend(l_customFilters)        if l_outFields == None:            l_outFields = TYPE_INFO[s_inType]        return self.sg.find_one(s_inType, filters, l_outFields)    # ---------------------------------------------------------------------------    # internal helpers    # ---------------------------------------------------------------------------    def _readconfigfile(self, configfile):        try:            f = open(configfile, 'r')            lines = f.readlines()            self.SERVER_PATH = lines[0].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.SCRIPT_NAME = lines[1].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.SCRIPT_KEY = lines[2].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.PROJECTPATH_FN = lines[3].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.TASKPATH_FN = lines[4].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")            self.TASKREF_FN = lines[5].split(self.configsplitcharacter)[1].strip("\r\n").strip("\n")        finally:            f.close()    def _fillcmdtable(self):        self.cmdtable["printConfig"] = [self.printconfig, 0, 0, "Print configuration"]        self.cmdtable["loginUser"] = [self.loginUser, 2, 3, "No description"]        self.cmdtable["logoutUser"] = [self.logoutUser, 0, 0, "No description"]        self.cmdtable["createOperator"] = [self.createOperator, 1, 4, "No description : login, password=None, superUser='Development Team', name=None"]        self.cmdtable["removeOperator"] = [self.removeOperator, 1, 1, "No description : login"]        self.cmdtable["changePassword"] = [self.changePassword, 3, 3, "No description : login, oldPassword, password"]        self.cmdtable["getSteps"] = [self.getSteps, 0, 0, "No description"]        self.cmdtable["getShotAssets"] = [self.getShotAssets, 1, 1, "No description : shotCode"]        self.cmdtable["getSequencesInfo"] = [self.getSequencesInfo, 0, 1, "No description : sequenceCode"]                self.cmdtable["getShotInfo"] = [self.getShotInfo, 1, 1, "No description : shotCode"]        self.cmdtable["getShotsInfo"] = [self.getShotsInfo, 0, 2, "No description : shotCode, sequenceCode"]        self.cmdtable["getTasks"] = [self.getTasks, 1, 3, "No description"]    def _hash(self, password):        return hashlib.md5(password).hexdigest()    def _encodeOperator(self, operatorData):        operatorData['name'] = operatorData.pop('code')        operatorData['login'] = operatorData.pop('sg_login')        operatorData['type'] = 'Operator'        if 'sg_password' in operatorData:            operatorData.pop('sg_password')        if 'sg_company' in operatorData:            operatorData['sg_company']['type'] = "Company"        return operatorData    def _getCookiePath(self, inCreateContainer=True):        folderPath = os.path.join(os.environ["USERPROFILE"], "zombillenium", "shotgunEngine")        if inCreateContainer and not os.path.exists(folderPath):            os.makedirs(folderPath)        return os.path.join(folderPath, "auth.ini")    def _createCookie(self, login, password):        cookiePath = self._getCookiePath()        config = ConfigParser.RawConfigParser()        config.add_section('auth')        config.set('auth', 'login', login)        config.set('auth', 'password', password)        config.set('auth', 'birth', int(time.time()))        with open(cookiePath, 'w') as f:            config.write(f)    def _removeCookie(self):        cookiePath = self._getCookiePath()        if os.path.isfile(cookiePath):            os.remove(cookiePath)    def _getProjectId(self, sProjectName=None):        if sProjectName == None:            sProjectName = self.projectName        if not sProjectName in PROJECT_IDS:            raise ValueError('Given project "{}" does not exist, please choose from "{}"'.format(sProjectName, ','.join(PROJECT_IDS.keys())))        return PROJECT_IDS[sProjectName] if sProjectName in PROJECT_IDS else PROJECT_IDS[DEFAULT_PROJECT]    # ---------------------------------------------------------------------------    # Commands    # ---------------------------------------------------------------------------    # USERS    # --------------------------------    def loginUser(self, login, password=None, silent=False, hashedPassword=None, createCookie=True):        """Log a user in shotgun. It would be either a 'real' shotgun User (HumanUser) or an Operator (Shotgun type defined in constant 'OPERATOR_ENTITY')        :param login: Required, login (string) of the user to log.        :param password: Required (or hashedPassword), password (string) of the user to log.        :param silent: Optional, logging (bool)        :param hashedPassword: Required (or password), the already hashed password (string) if user is supposed to be alredy logged (with cookie)        :param createCookie: Optional, create the cookie or not (bool)        :returns: dict of the logged user if successed (with keys ['code', 'sg_login', 'id', 'sg_user']), None otherwise.        """        if password == None:            password = hashedPassword        self.currentUser = self.sg.authenticate_human_user(login, password)        if(self.currentUser != None):            if(not silent):                print "User " + login + " authenticated successfully !"        else:            if hashedPassword == None:                hashedPassword = self._hash(password)            # Ok, let's try with an Operator            filters = [                ['sg_login', 'is', login],                {                "filter_operator": "any",                "filters": [                    [ "sg_password", "is", ""],                    ['sg_password', 'is', hashedPassword]                ]                }           ]            fields = USER_INFO            self.currentUser = self.sg.find_one(OPERATOR_ENTITY, filters, fields)            error = "Wrong credentials"            if self.currentUser != None:                if self.currentUser['sg_currentstep'] == None:                    error = "Operator " + login + " don't have any allowed steps !! Please update shotgun..."                    self.currentUser = None                else:                    if self.currentUser['sg_password'] == '' or self.currentUser['sg_password'] == None:                        self.currentUser['sg_password'] = hashedPassword                        self.sg.update(OPERATOR_ENTITY, self.currentUser['id'], {'sg_password':hashedPassword})                        print "Password has been updated to {0} for operator {1}".format(password, self.currentUser['sg_login'])                    #Collect Steps entity types                    steps = self.getSteps()                    for step in steps:                        for allowedStep in self.currentUser['sg_allowedsteps']:                            if allowedStep['id'] == step['id']:                                allowedStep['entity_type'] = step['entity_type']                        if self.currentUser['sg_currentstep'] != None and self.currentUser['sg_currentstep']['id'] == step['id']:                            self.currentUser['sg_currentstep']['entity_type'] = step['entity_type']                    self.currentUser = self._encodeOperator(self.currentUser)                    if(not silent):                        print "Operator " + login + " authenticated successfully !"        if self.currentUser == None:            raise RuntimeError('Cannot authenticate user {0} : {1}'.format(login, error))        elif createCookie:            # If we logged in successfully, create the cookie            self._createCookie(login, hashedPassword)        return self.currentUser    def getLoggedUser(self):        cookiePath = self._getCookiePath()        config = ConfigParser.RawConfigParser()        config.read(cookiePath)        if not config.has_section("auth"):            return None        # If cookie is found, verify it's still up to date        birthSeconds = int(config.get("auth", "birth"))        if time.time() - birthSeconds >= LIFETIME * 3600:            self._removeCookie()            return None        return self.loginUser(config.get("auth", "login"), hashedPassword=config.get("auth", "password"), createCookie=False)    def logoutUser(self):        self._removeCookie()        self.currentUser = None        self.sg.close()    # OPERATORS    # --------------------------------    def createOperator(self, login, password=None, superUser="Development Team", name=None):        #check if login already exists        filters = [                ['sg_login', 'is', login]           ]        fields = []        if len(login) < LOGIN_LENGTH:            print "Login too short ({0} characters minimum) !".format(LOGIN_LENGTH)            return None        if self.sg.find_one(OPERATOR_ENTITY, filters, fields) != None:            print "User with login {0} aleady exists !".format(login)            return None        if password == None:            #create random password            randStart = int(time.time() * 100.0)            password = self._hash(str(random.randint(randStart - 100, randStart + 100)))[:PASSWORD_LENGTH]        elif len(password) < PASSWORD_LENGTH:            print "Password too short ({0} characters minimum) !".format(PASSWORD_LENGTH)            return None        #verify that superUser exists and get its id        filters = [        ['name', 'is', superUser]           ]        fields = ['id']        userData = self.sg.find_one("HumanUser", filters, fields)        if userData == None:            print "Can't find superuser '{0}' !".format(superUser)            return None        if name == None:            name = login        elif len(name) < LOGIN_LENGTH:            print "Name too short ({0} characters minimum) !".format(LOGIN_LENGTH)            return None        #Ok, we're ready, create the Operator        data = {'sg_login': login,                'sg_password': self._hash(password),                'code': name,                'sg_user': userData }        result = self.sg.create(OPERATOR_ENTITY, data)        if result == None:            print "Cannot create operator !"            return None        self._encodeOperator(result)        return (result, password)    def changePassword(self, login, oldPassword, password, opId=None):        opData = {}        if opId == None:            #find the operator            filters = [                        ['sg_login', 'is', login],                        {                        "filter_operator": "any",                        "filters": [                            [ "sg_password", "is", ""],                            ['sg_password', 'is', self._hash(oldPassword)]                        ]                        }                    ]            fields = ['id']            opData = self.sg.find_one(OPERATOR_ENTITY, filters, fields)        else:            opData = {'type': OPERATOR_ENTITY, 'id': opId}        if opData != None:            data = {'sg_password': self._hash(password)}            opData = self.sg.update(OPERATOR_ENTITY, opData['id'], data)        if opData == None:            print "Cannot update operator password, login or old password incorrect !"            return False        return True    def removeOperator(self, login, opId=None):        opData = {}        if opId == None:            #find the operator            filters = [                    ['sg_login', 'is', login]               ]            fields = ['id']            opData = self.sg.find_one(OPERATOR_ENTITY, filters, fields)        else:            opData = {'type': OPERATOR_ENTITY, 'id': opId}        if opData == None:            print "Cannot remove operator '{0}', maybe it does not exists !".format(login)            return False        return self.sg.delete(OPERATOR_ENTITY, opData['id'])    # STEPS    # --------------------------------    def updateStep(self, d_inStep):        if d_inStep != self.currentUser['sg_currentstep']:            self.sg.update(OPERATOR_ENTITY, self.currentUser['id'], {'sg_currentstep':d_inStep})    def getSteps(self):        return self.sg.find("Step", [], STEP_INFO, [{'field_name':'list_order','direction':'asc'}])    # ASSETS    # --------------------------------    def getShotAssets(self, in_sShotCode):        shotData = self.sg.find_one("Shot", [["project", "is", {"type":"Project", "id":self._getProjectId()}],["code", "is", in_sShotCode]], ["assets", "id"])        if shotData:            occs = []            if len(shotData["assets"]) > 0:                #We will return one occurence by default, if we want to track empty occurences we could use : ,["sg_occurences", "is_not", None]                 occs = self.sg.find("AssetShotConnection", [["shot", "is", {"type":"Shot", "id":shotData["id"]}]], ["sg_occurences", "asset"])                for occ in occs:                    if occ['sg_occurences'] == None:                        occ['sg_occurences'] = 1            else:                print "No assets associated to shot '{0}'".format(in_sShotCode)            return occs        else:            print "'{0}' shot not found !".format(in_sShotCode)        return None    def getAssetInfo(self, in_sAssetCode):        return self.sg.find_one("Asset", [["project", "is", {"type":"Project", "id":self._getProjectId()}],["code", "is", in_sAssetCode]], ASSET_INFO)    def getAssetsInfo(self, in_sAssetName="", in_sCategory="", in_sSubType="",):        filters  = [["project", "is", {"type":"Project", "id":self._getProjectId()}]]        if in_sAssetName != "":            filters.append(["code", "contains", in_sAssetName])        if in_sCategory != "":            filters.append(["sg_asset_type", "is", in_sCategory])        if in_sSubType != "" and ASSET_SUBTYPE_FIELD != "":            filters.append([ASSET_SUBTYPE_FIELD, "is", in_sSubType])        return self.sg.find("Asset", filters, ASSET_INFO)    # SEQUENCES    # --------------------------------     def getSequencesInfo(self, in_sSequenceCode=""):        filters  = [["project", "is", {"type":"Project", "id":self._getProjectId()}]]        if in_sSequenceCode != "":            filters.append(["code", "contains", in_sSequenceCode])        return self.sg.find("Sequence", filters, SEQUENCE_INFO)    # SHOTS    # --------------------------------    def getShotInfo(self, in_sShotCode):        return self.sg.find_one("Shot", [["project", "is", {"type":"Project", "id":self._getProjectId()}],["code", "is", in_sShotCode]], SHOT_INFO)    def getShotsInfo(self, in_sShotCode="", in_sSequenceCode=""):        filters  = [["project", "is", {"type":"Project", "id":self._getProjectId()}]]        if in_sShotCode != "":            filters.append(["code", "contains", in_sShotCode])        if in_sSequenceCode != "":            seqs = self.getSequencesInfo(in_sSequenceCode)            if len(seqs) > 0:                filterOp = {                    "filter_operator": "any",                    "filters": []                    }                for seq in seqs:                    filterOp["filters"].append(['sg_sequence', 'is', {'type':'Sequence', 'id':seq['id']}])                            filters.append(filterOp)            else:                print "Can't find any sequences with pattern '{0}'".format(in_sSequenceCode)                return []        return self.sg.find("Shot", filters, SHOT_INFO)    # TASKS    # --------------------------------    def getTasks(self, d_inEntity, d_inStep=None, d_inUser=None):        filters =   [                        ['entity', 'is', d_inEntity],                    ]        if d_inStep != None:            filters.append(['step', 'is', d_inStep])        if d_inUser != None:            filters.append([OPERATORS_FIELD, 'contains', self.context['damProject']._shotgundb.currentUser])        """        {            "filter_operator": "any",            "filters": [                [ "sg_status_list", "is", "rdy"],                [ "sg_status_list", "is", "ip" ]            ]        }        """        tasks = self.sg.find("Task", filters, TASK_INFO)        return tasks if not tasks == None else []    """    def listTasks(self, login, password, sg=None):        if(sg == None):            self.sg = Shotgun(self.SERVER_PATH, self.SCRIPT_NAME, self.SCRIPT_KEY)        else:            self.sg = sg        result = self.loginUser(login, password, self.sg)        if(result == None):            print "Incorrect login credentials !"            return        filters = [                ['task_assignees', 'is', result],                {                    "filter_operator": "any",                    "filters": [                        [ "sg_status_list", "is", "rdy"],                        [ "sg_status_list", "is", "ip" ]                    ]                }           ]        fields = ['content', 'step', 'entity', 'project', 'sg_status_list']        tasks = sg.find("Task", filters, fields)        print "Il y a " + str(len(tasks)) + " taches assignees a " + result["login"]        for task in tasks:            entityName = "NoEntity"            entityType = "NoType"            stepName = "NoStep"            if(task['entity'] != None):                entityName = task['entity']['name']                entityType = task['entity']['type']            if(task['step'] != None):                stepName = task['step']['name']            print (task['project']['name'] + " | ").ljust(25) + (entityType + " : ").ljust(10) + (stepName + " ").ljust(10) + (entityName + " - ").ljust(20) + task['content']    """    # VERIONS    # --------------------------------    def getVersions(self, d_inTask):        filters =   [                        ['sg_task', 'is', d_inTask]                    ]        versions = self.sg.find("Version", filters, VERSION_INFO, [{'field_name':'code','direction':'asc'}])        return versions if not versions == None else []    def createVersion(self, sEntityType, s_inEntityName, s_inVersionName, s_inTaskName, s_inComment=""):        entity = self._getEntity(s_inEntityName, s_inType=sEntityType)        if entity == None:            print "Can't get entity ({0}) from {1}".format(sEntityType, s_inEntityName)            return None        task = self._getEntity(s_inTaskName, s_inType='Task', l_customFilters=[['entity', 'is', entity]])        if task == None:            print "Can't get task {0} on {1}".format(s_inTaskName, s_inEntityName)            return None        # Create the version        data = {                'project': {'type':'Project', 'id':self._getProjectId()},                'code': s_inVersionName,                'description': s_inComment,                'sg_status_list': 'rev',                'entity': entity,                'sg_task': task,                }        if self.currentUser != None and self.currentUser['sg_user'] != None:            data['user'] = self.currentUser['sg_user']            updatableUser = self.currentUser.copy()            updatableUser['type'] = OPERATOR_ENTITY            data[OPERATOR_FIELD] = updatableUser        return self.sg.create('Version', data)    def uploadVersion(self, s_inVersionName, s_inMediaPath):        version = self._getEntity(s_inVersionName, s_inType='Version')        if version != None:            # Use the ID from the previous result to update the newly created version calling sg.upload and specifying 'sg_uploaded_movie'            if os.path.isfile(s_inMediaPath):                return self.sg.upload('Version', version['id'], s_inMediaPath, 'sg_uploaded_movie')            else:                print "Given media {0} does not exists !!".format(s_inMediaPath)        else:            print "Can't get version from {0}".format(s_inVersionName)                return None    # ---------------------------------------------------------------------------    # cmdLine part    # ---------------------------------------------------------------------------    def printconfig(self):        print '';        print ' *** TK ShotgunEngine Config ***';        print '-----------------------------------------';        print 'SERVER_PATH "' + self.SERVER_PATH + '"'        print 'SCRIPT_NAME "' + self.SCRIPT_NAME + '"'        print 'SCRIPT_KEY "' + self.SCRIPT_KEY + '"'        print 'PROJECTPATH_FN "' + self.PROJECTPATH_FN + '"'        print 'TASKPATH_FN "' + self.TASKPATH_FN + '"'        print 'TASKREF_FN "' + self.TASKREF_FN + '"'        print '-----------------------------------------';        print '';    def printhelp(self):        print '';        print ' *** TK ShotgunEngine Help ***';        print '-----------------------------------------';        for key in self.cmdtable:            print key + " : from " + str(self.cmdtable[key][1]) + " to " + str(self.cmdtable[key][2]) + " args (" + str(self.cmdtable[key][3]) + ")"        print '-----------------------------------------';        print '';    def _parsecmdline(self, argumentsStr):        splitArgs = argumentsStr.split(" ")        arguments = []        grouping = None        for splitArg in splitArgs:            if "\"" in splitArg:                if grouping == None:                    grouping = [splitArg.replace("\"", "")]                else:                    grouping.append(splitArg.replace("\"", ""))                    arguments.append(" ".join(grouping))                    grouping=None            else:                if grouping != None:                    grouping.append(splitArg)                else:                    arguments.append(splitArg)        if grouping != None:            arguments.append(" ".join(grouping))                    self._readcmdline(arguments)    def _readcmdline(self, arguments):        if len(arguments) == 0:            print "No argments given, please give at least a command name!"            self.printhelp()        else:            cmdName = arguments[0]            arguments = arguments[1:]            if cmdName in self.cmdtable:                minArgs = self.cmdtable[cmdName][1]                maxArgs = self.cmdtable[cmdName][2]                desc = self.cmdtable[cmdName][3]                if len(arguments) >= minArgs and len(arguments) <= maxArgs :                    self._runCommand(self.cmdtable[cmdName][0], arguments)                else:                    argsHint = cmdName + " : wrong number of arguments, "                    if minArgs == maxArgs :                        argsHint += str(minArgs)                    else:                        argsHint += str(minArgs) + " to " + str(maxArgs)                    argsHint += " expected (" + str(len(arguments)) + " given)"                    print argsHint                    print "Description : {0}".format(self.cmdtable[cmdName][3])            else:                print "Command \"" + cmdName + "\" dont 'exists !"                self.printhelp()    def _runCommand(self, cb, tokens):        print cb(*tokens)if __name__ == '__main__':    core=ShotgunEngine()    if len(sys.argv) == 1:#Go into a input loop        cmdInput = ""        while True:            print ""            cmdInput = raw_input("Engine cmd >> ")            if "exit" in cmdInput.lower():                break            core._parsecmdline(cmdInput)    else:#execute command directly        core._readcmdline(sys.argv[1:])